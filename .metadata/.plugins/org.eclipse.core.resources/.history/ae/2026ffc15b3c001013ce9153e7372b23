package com.example.vipReferenceMgmt.serviceImpl;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.management.RuntimeErrorException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.CrudRepository;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.multipart.MultipartFile;

import com.example.vipReferenceMgmt.dto.ChartData;
import com.example.vipReferenceMgmt.dto.DashboardStatsResponse;
import com.example.vipReferenceMgmt.dto.FinalAssigneeListDto;
import com.example.vipReferenceMgmt.dto.ForwardReference;
import com.example.vipReferenceMgmt.dto.ReferenceAssignRequest;
import com.example.vipReferenceMgmt.dto.ReferenceFilterByQueue;
import com.example.vipReferenceMgmt.dto.VipReferenceDetailsResponse;
import com.example.vipReferenceMgmt.dto.VipReferenceDocumentResponse;
import com.example.vipReferenceMgmt.dto.VipReferenceListResponse;
import com.example.vipReferenceMgmt.entity.ReferenceAssignmentHistory;
import com.example.vipReferenceMgmt.entity.Role;
import com.example.vipReferenceMgmt.entity.UserReport;
import com.example.vipReferenceMgmt.entity.VipReferenceAssignment;
import com.example.vipReferenceMgmt.entity.VipReferenceDocument;
import com.example.vipReferenceMgmt.entity.VipReferenceList;
import com.example.vipReferenceMgmt.enums.ReferenceStatus;
import com.example.vipReferenceMgmt.repository.ReferenceAssignmentHistoryRepository;
import com.example.vipReferenceMgmt.repository.RoleRepository;
import com.example.vipReferenceMgmt.repository.UserReportRepository;
import com.example.vipReferenceMgmt.repository.VipReferenceAssignmentRepository;
import com.example.vipReferenceMgmt.repository.VipReferenceDocumentRepository;
import com.example.vipReferenceMgmt.repository.VipReferenceListRepository;
import com.example.vipReferenceMgmt.service.ReferenceAssignmentService;

import jakarta.transaction.Transactional;

@Service
public class ReferenceAssignmentServiceImpl implements ReferenceAssignmentService {
	@Autowired
	private VipReferenceAssignmentRepository assignmentRepo;

	@Autowired
	private VipReferenceListRepository vipReferenceListRepository;

	@Autowired
	private RoleRepository roleRepository;

	@Autowired
	private VipReferenceDocumentRepository vipReferenceDocumentRepository;

	@Autowired
	private UserReportRepository userReportRepository;
	
	@Autowired
	private ReferenceAssignmentHistoryRepository referenceAssignmentHistoryRepository;

	@Override
	public List<VipReferenceListResponse> getReferencesOnLoginId(String loginId) {
		// here need to check login user are present or not

		List<VipReferenceAssignment> assignments = assignmentRepo.findByToLogin_LoginId(loginId);

		return assignments.stream().map(assignment -> {
			VipReferenceList ref = assignment.getVipReference();
			VipReferenceListResponse response = new VipReferenceListResponse();
			response.setReferenceId(ref.getReferenceId());
			response.setReferenceNo(ref.getReferenceNo());
			response.setSubject(ref.getSubject());
			response.setPrirority(ref.getPrirority());
			response.setReceivedDate(ref.getReceivedDate());
			response.setStatus(assignment.getStatus().name());
			response.setCurrentQueue(ref.getCurrentQueue());
			return response;
		}).collect(Collectors.toList());
	}

	@Override
	public List<VipReferenceListResponse> getReferencesOnLoginIdAndStatus(String loginId, ReferenceStatus status) {
		// here need to check login user are present or not

		List<VipReferenceAssignment> assignments = assignmentRepo.findByToLogin_LoginIdAndStatus(loginId, status);

		return assignments.stream().map(assignment -> {
			VipReferenceList ref = assignment.getVipReference();
			VipReferenceListResponse response = new VipReferenceListResponse();
			response.setReferenceId(ref.getReferenceId());
			response.setReferenceNo(ref.getReferenceNo());
			response.setSubject(ref.getSubject());
			response.setPrirority(ref.getPrirority());
			response.setReceivedDate(ref.getReceivedDate());
			response.setStatus(assignment.getStatus().name());
			response.setCurrentQueue(ref.getCurrentQueue());
			return response;
		}).collect(Collectors.toList());
	}

	@Override
	public DashboardStatsResponse getDashboardStats(String loginId) {
		int inboxCount = assignmentRepo.countByToLogin_LoginIdAndStatus(loginId, ReferenceStatus.INBOX);
		int sentCount = assignmentRepo.countByToLogin_LoginIdAndStatus(loginId, ReferenceStatus.SENT);

		ChartData chartData = new ChartData();
		chartData.setLabels(List.of("Inbox", "Sent"));
		chartData.setData(List.of(inboxCount, sentCount));

		DashboardStatsResponse response = new DashboardStatsResponse();
		response.setInboxCount(inboxCount);
		response.setSentCount(sentCount);
		response.setChartData(chartData);

		return response;
	}

	@Override
	@Transactional
	public ResponseEntity<String> assignReference(@ModelAttribute ReferenceAssignRequest request) {

		// Create VIP Reference from form		
	    VipReferenceList vipReference = new VipReferenceList();
	    vipReference.setDateOfLetter(request.getDateOfLetter());
	    vipReference.setReceivedDate(request.getDateOfReceiving());
	    vipReference.setDateOfEntry(request.getDateOfEntry());
	    vipReference.setNameOfDignitary(request.getNameOfDignitary());
	    vipReference.setEmailId(request.getEmailId());
	    vipReference.setDesignation(request.getDesignation());
	    vipReference.setState(request.getState());
	    vipReference.setConstituency(request.getConstituency());
	    vipReference.setPrirority(request.getPrirority());
	    vipReference.setCategoryOfSubject(request.getCategoryOfSubject());
	    vipReference.setSubCategoryOfSubject(request.getSubCategoryOfSubject());
	    vipReference.setSubject(request.getSubject());
	    vipReference.setCreatedBy(request.getCreatedBy());
	    vipReference.setCreatedAt(request.getCreatedAt());
	    
	    Boolean isDraft = Boolean.valueOf(request.getIsDraft());
	    
	    if (isDraft) {
	        // === Draft Save Logic ===
	        vipReference.setDraft(true);
	        vipReference.setCurrentQueue(null);  // No queue for draft
	        vipReference = vipReferenceListRepository.save(vipReference);

	        // Skip assignments and reference number generation
	        return ResponseEntity.ok("Draft saved successfully.");
	    } else {
	    	vipReference.setDraft(false);
	    	// Auto-generate reference number
			String stateCode = request.getState(); // Ex: "KA"
			Long count = vipReferenceListRepository.countByState(stateCode); // Custom query
			String referenceNo = stateCode + String.format("%05d", count + 1);
			vipReference.setReferenceNo(referenceNo);

			// Create assignment record for Assigner
			UserReport fromLogin = userReportRepository.findByLoginId(request.getFromLoginId())
					.orElseThrow(() -> new RuntimeException("From User not found with loginId"));
			UserReport toLogin = userReportRepository.findByLoginId(request.getToLoginId())
					.orElseThrow(() -> new RuntimeException("To User not found with loginId"));
			Role fromRole = roleRepository.findByRoleId(request.getFromRoleId())
					.orElseThrow(() -> new RuntimeException("Role not found"));
			Role toRole = roleRepository.findByRoleId(request.getToRoleId())
					.orElseThrow(() -> new RuntimeException("Role not found"));

			// Set current queue as "VIP_Assigner" because that's the next after initiator
			vipReference.setCurrentQueue(toRole.getRoleName());

			// Save VIP reference
			vipReference = vipReferenceListRepository.save(vipReference);

			VipReferenceAssignment assignment = new VipReferenceAssignment();
			assignment.setFromLogin(fromLogin);
			assignment.setToLogin(toLogin);
			assignment.setVipReference(vipReference);
			assignment.setFromRole(fromRole);
			assignment.setToRole(toRole);
			assignment.setStatus(ReferenceStatus.INBOX);
			assignment.setAssignedAt(LocalDateTime.now());
			assignmentRepo.save(assignment);

			// Also record SENT entry for initiator (fromUser)
			VipReferenceAssignment sentRecord = new VipReferenceAssignment();
			sentRecord.setFromLogin(fromLogin);
			sentRecord.setToLogin(toLogin); // since this is the sender
			sentRecord.setVipReference(vipReference);
			sentRecord.setFromRole(fromRole);
			sentRecord.setToRole(toRole);
			sentRecord.setStatus(ReferenceStatus.SENT);
			sentRecord.setAssignedAt(LocalDateTime.now());
			assignmentRepo.save(sentRecord);

			String uploadDir = "C:/Users/mahin/BackUp-Online/OneDrive/Desktop/VIP_Reference_Management/VIP_Reference_Mgmt_Angular/VIP_Reference_Management/src/assets/pdf";

			try {
				Files.createDirectories(Paths.get(uploadDir)); // Create folder if not exists

				for (int i = 0; i < request.getFiles().size(); i++) {
					MultipartFile file = request.getFiles().get(i);

					if (!file.getContentType().equals("application/pdf")) {
						throw new RuntimeException("Only PDF files are allowed.");
					}

					if (file.getSize() > 10 * 1024 * 1024) { // 10 MB = 10 * 1024 * 1024 bytes
						throw new RuntimeException(
								"File " + file.getOriginalFilename() + " exceeds the maximum allowed size of 10 MB.");
					}
					String documentType = request.getDocumentTypes().get(i);
					String comment = request.getComments().get(i);

					String fileName = System.currentTimeMillis() + "_" + file.getOriginalFilename();
					String filePath = uploadDir + fileName;
					Files.copy(file.getInputStream(), Paths.get(filePath), StandardCopyOption.REPLACE_EXISTING);

					VipReferenceDocument document = new VipReferenceDocument();
					document.setFileName(file.getOriginalFilename());
					document.setFilePath(filePath);
					document.setDocumentType(documentType);
					document.setComments(comment);
					document.setVipReference(vipReference);
					vipReferenceDocumentRepository.save(document);
				}
			} catch (IOException e) {
				throw new RuntimeException("Failed to save file: " + e.getMessage(), e);
			}

			return ResponseEntity.ok("Reference assigned successfully.");
	    }
	    
	    

		
	}

	@Override
	@Transactional
	public ResponseEntity<String> updateReference(ReferenceAssignRequest request) {

		if (request.getUpdatedBy() == null || request.getUpdatedAt() == null) {
			return ResponseEntity.badRequest().body("updatedBy and updatedAt are required.");
		}

		VipReferenceList vipReference = vipReferenceListRepository.findById(request.getVipReferenceId()).orElse(null);
		if (vipReference == null) {
			throw new RuntimeException("Data Not found");
		} else {

			if (request.getNameOfDignitary() != null)
				vipReference.setNameOfDignitary(request.getNameOfDignitary());
			if (request.getEmailId() != null)
				vipReference.setEmailId(request.getEmailId());
			if (request.getDesignation() != null)
				vipReference.setDesignation(request.getDesignation());
			if (request.getConstituency() != null)
				vipReference.setConstituency(request.getConstituency());
			if (request.getPrirority() != null)
				vipReference.setPrirority(request.getPrirority());
			if (request.getCategoryOfSubject() != null)
				vipReference.setCategoryOfSubject(request.getCategoryOfSubject());
			if (request.getSubCategoryOfSubject() != null)
				vipReference.setSubCategoryOfSubject(request.getSubCategoryOfSubject());
			if (request.getSubject() != null)
				vipReference.setSubject(request.getSubject());

			vipReference.setUpdatedAt(request.getUpdatedAt());
			vipReference.setUpdatedBy(request.getUpdatedBy());

			vipReferenceListRepository.save(vipReference);
			return ResponseEntity.ok("Reference updated successfully.");
		}

	}

	@Override
	@Transactional
	public ResponseEntity<String> forwardReference(ForwardReference request) {
		UserReport fromLogin = userReportRepository.findByLoginId(request.getFromLogin())
				.orElseThrow(() -> new RuntimeException("From User not found with loginId"));
		UserReport toLogin = userReportRepository.findByLoginId(request.getToLogin())
				.orElseThrow(() -> new RuntimeException("To User not found with loginId"));
		Role fromRole = roleRepository.findByRoleId(request.getFromRoleId())
				.orElseThrow(() -> new RuntimeException("Role not found"));
		Role toRole = roleRepository.findByRoleId(request.getRoleId())
				.orElseThrow(() -> new RuntimeException("Role not found"));
		VipReferenceList vipReference = vipReferenceListRepository.findById(request.getVipReferenceId())
				.orElseThrow(() -> new RuntimeException("Reference not found"));
//		VipReferenceAssignment vipRef= assignmentRepo.findByToLogin_LoginIdAndStatusAndVipReference_ReferenceId(request.getFromLogin(),ReferenceStatus.INBOX,request.getVipReferenceId());
//		System.out.println(vipRef);
		
		 //set queue
	    vipReference.setCurrentQueue(toRole.getRoleName());
	    
		Optional<VipReferenceAssignment> vipRef = assignmentRepo.findByToLogin_LoginIdAndStatusAndVipReference_ReferenceId(
				fromLogin.getLoginId(), ReferenceStatus.INBOX, vipReference.getReferenceId());
		
	
		vipRef.ifPresent(ref -> {
			ReferenceAssignmentHistory history = new ReferenceAssignmentHistory();

		    history.setAssigneeName(ref.getAssigneeName());

		    // Extract loginId strings from UserReport entities
		    history.setFromLogin(ref.getFromLogin() != null ? ref.getFromLogin().getLoginId() : null);
		    history.setToLogin(ref.getToLogin() != null ? ref.getToLogin().getLoginId() : null);

		    // Extract referenceId from VipReferenceList entity
		    history.setVipReference(ref.getVipReference() != null ? ref.getVipReference().getReferenceId() : null);

		    history.setAssignedAt(ref.getAssignedAt());
		    history.setRoutingType(ref.getRoutingType());
		    history.setActionType(ref.getActionType());
		    history.setAction(ref.getAction());
		    history.setReplyType(ref.getReplyType());
		    history.setAssigneeOrganization(ref.getAssigneeOrganization());
		    history.setAssigneeOffice(ref.getAssigneeOffice());
		    history.setAssigneeDesignation(ref.getAssigneeDesignation());
		    history.setAssignerComment(ref.getAssignerComment());
		   
			// Save the history entity
		    referenceAssignmentHistoryRepository.save(history);

		    // Delete the original record
		    assignmentRepo.delete(ref);
		});
		try {
			VipReferenceAssignment assignment = new VipReferenceAssignment();
			assignment.setFromLogin(fromLogin);
			assignment.setToLogin(toLogin);
			assignment.setVipReference(vipReference);
			assignment.setFromRole(fromRole);
			assignment.setToRole(toRole);
			assignment.setStatus(ReferenceStatus.INBOX);
			assignment.setAssignedAt(LocalDateTime.now());
			assignment.setRoutingType(request.getRoutingType());
			assignment.setActionType(request.getActionType());
			assignment.setAction(request.getAction());
			assignment.setReplyType(request.getReplyType());
			assignment.setAssigneeOrganization(request.getAssigneeOrganization());
			assignment.setAssigneeOffice(request.getAssigneeOffice());
			assignment.setAssigneeDesignation(request.getAssigneeDesignation());
			assignment.setAssigneeName(request.getAssigneeName());
			assignment.setAssignerComment(request.getAssignerComment());
		
			assignmentRepo.save(assignment);

			// Also record SENT entry for initiator (fromUser)
			VipReferenceAssignment sentRecord = new VipReferenceAssignment();
			sentRecord.setFromLogin(fromLogin);
			sentRecord.setToLogin(toLogin); // since this is the sender
			sentRecord.setVipReference(vipReference);
			sentRecord.setFromRole(fromRole);
			sentRecord.setToRole(toRole);
			sentRecord.setStatus(ReferenceStatus.SENT);
			sentRecord.setAssignedAt(LocalDateTime.now());
			sentRecord.setRoutingType(request.getRoutingType());
			sentRecord.setActionType(request.getActionType());
			sentRecord.setAction(request.getAction());
			sentRecord.setReplyType(request.getReplyType());
			sentRecord.setAssigneeOrganization(request.getAssigneeOrganization());
			sentRecord.setAssigneeOffice(request.getAssigneeOffice());
			sentRecord.setAssigneeDesignation(request.getAssigneeDesignation());
			sentRecord.setAssigneeName(request.getAssigneeName());
			sentRecord.setAssignerComment(request.getAssignerComment());
			assignmentRepo.save(sentRecord);

			return ResponseEntity.ok("Reference assigned successfully");

		} catch (Exception ex) {
			throw new RuntimeException("Failed to assign reference");
		}
	}

	// VIP QUEUE List

	@Override
	public List<String> getQueuesByLoginId(String loginId) {
		UserReport loginUser = userReportRepository.findByLoginId(loginId)
				.orElseThrow(() -> new RuntimeException("User not found with loginId: " + loginId));

		return loginUser.getRoles().stream().map(Role::getRoleName).collect(Collectors.toList());
	}

	@Override
	public List<VipReferenceListResponse> getReferencesByLoginIdAndQueueAndStatus(ReferenceFilterByQueue request) {
		List<VipReferenceAssignment> assignments = assignmentRepo.findByToLogin_LoginIdAndToRole_RoleNameAndStatus(request.getLoginId(),
				request.getQueue(),request.getStatus());

		return assignments.stream().map(assignment -> {
			VipReferenceList ref = assignment.getVipReference();
			VipReferenceListResponse response = new VipReferenceListResponse();
			response.setReferenceId(ref.getReferenceId());
			response.setReferenceNo(ref.getReferenceNo());
			response.setSubject(ref.getSubject());
			response.setPrirority(ref.getPrirority());
			response.setReceivedDate(ref.getReceivedDate());
			response.setStatus(assignment.getStatus().name());
			response.setCurrentQueue(ref.getCurrentQueue());
			return response;
		}).collect(Collectors.toList());
	}

	@Override
	public VipReferenceDetailsResponse getReferenceDetailsById(String referenceNumber) {
		VipReferenceList ref = vipReferenceListRepository.findByReferenceNo(referenceNumber)
				.orElseThrow(() -> new RuntimeException("Reference not found"));

		VipReferenceDetailsResponse response = new VipReferenceDetailsResponse();
		response.setReferenceId(ref.getReferenceId());
		response.setReferenceNo(ref.getReferenceNo());
		response.setSubject(ref.getSubject());
		response.setReceivedDate(ref.getReceivedDate());
		response.setDateOfLetter(ref.getDateOfLetter());
		response.setDateOfEntry(ref.getDateOfEntry());
		response.setNameOfDignitary(ref.getNameOfDignitary());
		response.setEmailId(ref.getEmailId());
		response.setDesignation(ref.getDesignation());
		response.setState(ref.getState());
		response.setConstituency(ref.getConstituency());
		response.setPrirority(ref.getPrirority());
		response.setCategoryOfSubject(ref.getCategoryOfSubject());
		response.setSubCategoryOfSubject(ref.getSubCategoryOfSubject());
		response.setCurrentQueue(ref.getCurrentQueue());

		// Map documents if available
		List<VipReferenceDocumentResponse> documentResponses = ref.getDocuments().stream().map(doc -> {
			VipReferenceDocumentResponse docRes = new VipReferenceDocumentResponse();

			docRes.setFileName(doc.getFileName());
			docRes.setFilePath(doc.getFilePath());
			docRes.setDocumentType(doc.getDocumentType());
			docRes.setComments(doc.getComments());
			return docRes;
		}).collect(Collectors.toList());
		response.setDocuments(documentResponses);
		return response;
	}


}
